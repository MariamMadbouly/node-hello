name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  build:
    needs: lint-code
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Make package public
        run: |
          OWNER="${{ github.repository_owner }}"
          PACKAGE="${{ github.repository }}"
          gh api --method PATCH "/users/$OWNER/packages/container/$PACKAGE/visibility" \
            -F visibility=public \
            || echo "Package might already be public or not pushed yet"
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Cache Terraform providers
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           **/.terraform
  #           **/.terraform.lock.hcl
  #         key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.6.0

  #     - name: Terraform Validate
  #       run: terraform validate
  #       working-directory: ./terraform

  #     - name: Terraform Init
  #       run: terraform init
  #       working-directory: ./terraform

  #     - name: Terraform Plan
  #       run: terraform plan
  #       working-directory: ./terraform
  #       env:
  #         TF_VAR_repository_owner: ${{ github.repository_owner }}
  #         TF_VAR_new_relic_license_key: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
  #         TF_VAR_aws_region: ${{ secrets.AWS_REGION }}

  #     - name: Terraform Apply
  #       run: terraform apply -auto-approve
  #       working-directory: ./terraform
  #       env:
  #         TF_VAR_repository_owner: ${{ github.repository_owner }}
  #         TF_VAR_new_relic_license_key: ${{ secrets.NEW_RELIC_LICENSE_KEY }}
  #         TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
